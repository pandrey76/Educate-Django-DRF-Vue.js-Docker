
    Django - DRF - Vue-js - Docker

    Django Rest Framework

Home page: https://www.django-rest-framework.org/
Django Rest Framework - позволяет нам удобно сериализовать и десериализовать наши бизнес модели. Например у нас есть
объект "Автомобиль", который хранится в СУБД и у этого объекта есть ряд аттрибутов:
    - Vendor;
    - Модель автомобиля;
    - ОбЪем двигателя;
    - Год выпуска;
    - и т.д.
 И нам нужно это всё сериализовать например в JSON мы для этого как раз и будем использовать DRF.

    Vue.js

Vue.js - очень гибкий JS Framework, в отличие от React, который позволяет нам стартовать новые проекты и чисто на Vue.js и
дополнять Vue.js уже существующие проекты, на одной странице может быть JQuery, а на другой у нас может быть Vue.js.
основной особенностью Vue.js, как и всех JS Frameworks является реактивность и декларотивность.
    Реактивность - подразумевается следующее, допустим мы рисуем какую-нибудь переменную она у нас равна 5, потом мы
меняем эту переменную на 10 и она у нас перерисовывается во всех местах и во всех местах от неё зависящих происходит
перерисовка или пересчёт и т.д.
    Декларотивность - мы описываем не как должны менятся данные, а где они должны отображатся и по какой схеме их
вычислять, т.е. мы напрямую с DOM деревом html страницы не взаимодействуем, другими словами нам не надо писать код типа
$a.mobile.text = "Hello!", который все привыкли писать на JQuery и сильно страдать от этого. Vue.js нас от этого
избавляет. 07.01

    Создаём папку проекта и первое, что мы делаем это создаём виртуальное окружение - отдельный инстанс Python, который
содержит свои библиотеки с определёнными версиями, для того чтобы обеспеычить совместимость и работу даже старых
проектов со старыми пакетами Python.
    admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker$ python3 -m venv localenv
    admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker$ cd localenv
    admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv$ cd bin
    admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/bin$ . activate
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/bin$ . activate
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/bin$
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/bin$ django
        django: команда не найдена
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/bin$ pip3 install django
Collecting django
  Cache entry deserialization failed, entry ignored
  Downloading https://files.pythonhosted.org/packages/12/68/8c125da33aaf0942add5095a7a2a8e064b3812d598e9fb5aca9957872d71/Django-3.0.4-py3-none-any.whl (7.5MB)
    100% |████████████████████████████████| 7.5MB 152kB/s
Collecting pytz (from django)
  Cache entry deserialization failed, entry ignored
  Downloading https://files.pythonhosted.org/packages/e7/f9/f0b53f88060247251bf481fa6ea62cd0d25bf1b11a87888e53ce5b7c8ad2/pytz-2019.3-py2.py3-none-any.whl (509kB)
    100% |████████████████████████████████| 512kB 352kB/s
Collecting asgiref~=3.2 (from django)
  Downloading https://files.pythonhosted.org/packages/68/00/25013f7310a56d17e1ab6fd885d5c1f216b7123b550d295c93f8e29d372a/asgiref-3.2.7-py2.py3-none-any.whl
Collecting sqlparse>=0.2.2 (from django)
  Cache entry deserialization failed, entry ignored
  Downloading https://files.pythonhosted.org/packages/85/ee/6e821932f413a5c4b76be9c5936e313e4fc626b33f16e027866e1d60f588/sqlparse-0.3.1-py2.py3-none-any.whl (40kB)
    100% |████████████████████████████████| 40kB 262kB/s
Installing collected packages: pytz, asgiref, sqlparse, django
Successfully installed asgiref-3.2.7 django-3.0.4 pytz-2019.3 sqlparse-0.3.1
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/bin$ cd ../
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv$ cd ../
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker$ django-admin startproject project

    Здесь переименовываем "project/prioject" в "backend/project"

    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker$ cd backend
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/backend$ ./manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).

You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.

March 26, 2020 - 05:55:05
Django version 3.0.4, using settings 'project.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.

    Стартанули пустой web сервер на django.

    Остановили Ctrl+z.

    Запустили миграции

    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/backend$ ./manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying sessions.0001_initial... OK

   Создаём Frontend через Vue CLI.

   Сначало необходимо установить Node.js. Vue CLI требуется Node.js версии 8.9 или выше (рекомендуется 8.11.0+).
Управлять несколькими версиями Node на машине можно с помощью nvm или nvm-windows.

    Устанавливаем Vue CLI:

        npm install -g @vue/cli
            # ИЛИ
        yarn global add @vue/cli

        vue --version

    Обновление
    Для обновления глобального пакета Vue CLI выполните команду:

        npm update -g @vue/cli
            # ИЛИ
        yarn global upgrade --latest @vue/cli.

    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker$ vue create frontend

Шаг №1
    Vue CLI v4.2.3
     ? Please pick a preset: (Use arrow keys)
     ❯ default (babel, eslint)
        Manually select features
    Здесь выбираем "Manually".

Шаг №2
    Vue CLI v4.2.3
    ? Please pick a preset: Manually select features
    ? Check the features needed for your project:
        ◉ Babel
        ◯ TypeScript
        ◯ Progressive Web App (PWA) Support
        ◉ Router
        ◯ Vuex
        ◯ CSS Pre-processors
    ❯◉ Linter / Formatter
        ◯ Unit Testing
        ◯ E2E Testing
    Жмём "Enter".

Шаг №3
    Vue CLI v4.2.3
    ? Please pick a preset: Manually select features
    ? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n)
    Жмём "n".

Шаг №4
    Vue CLI v4.2.3
    ? Please pick a preset: Manually select features
    ? Check the features needed for your project: Babel, Router, Linter
    ? Use history mode for router? (Requires proper server setup for index fallback in production) No
    ? Pick a linter / formatter config:
        ESLint with error prevention only
    ❯ ESLint + Airbnb config
        ESLint + Standard configШаг №5
        ESLint + Prettier
    Выбираем ESLint + Airbnb config и жмём "Enter".

Шаг №5
    Vue CLI v4.2.3
    ? Please pick a preset: Manually select features
    ? Check the features needed for your project: Babel, Router, Linter
    ? Use history mode for router? (Requires proper server setup for index fallback in production) No
    ? Pick a linter / formatter config: Airbnb
    ? Pick additional lint features: (Press <space> to select, <a> to toggle all, <i> to invert selection)
        ❯◉ Lint on save
        ◯ Lint and fix on commit
    Выбираем "Lint on save" и жмём "Enter".

Шаг №6
    Vue CLI v4.2.3
    ? Please pick a preset: Manually select features
    ? Check the features needed for your project: Babel, Router, Linter
    ? Use history mode for router? (Requires proper server setup for index fallback in production) No
    ? Pick a linter / formatter config: Airbnb
    ? Pick additional lint features: (Press <space> to select, <a> to toggle all, <i> to invert selection)Lint on save
    ? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)
    ❯ In dedicated config files
      In package.json
    Выбираем "In dedicated config files" и жмём "Enter".

Шаг №7
    Vue CLI v4.2.3
    ? Please pick a preset: Manually select features
    ? Check the features needed for your project: Babel, Router, Linter
    ? Use history mode for router? (Requires proper server setup for index fallback in production) No
    ? Pick a linter / formatter config: Airbnb
    ? Pick additional lint features: (Press <space> to select, <a> to toggle all, <i> to invert selection)Lint on save
    ? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files
    ? Save this as a preset for future projects? (y/N)
     Жмём непонятно что, как автор сказал "Что-то натыкал".

Шаг №8
Vue CLI v4.2.3
    ? Please pick a preset: Manually select features
    ? Check the features needed for your project: Babel, Router, Linter
    ? Use history mode for router? (Requires proper server setup for index fallback
    in production) No
    ? Pick a linter / formatter config: Airbnb
    ? Pick additional lint features: (Press <space> to select, <a> to toggle all, <i> to invert selection)Lint on save
    ? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files
    ? Save this as a preset for future projects? No
    ? Pick the package manager to use when installing dependencies: NPM

Начался процесс установки
Vue CLI v4.2.3
✨  Creating project in /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/frontend.
⚙️  Installing CLI plugins. This might take a while...


> yorkie@2.0.0 install /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/frontend/node_modules/yorkie
> node bin/install.js

setting up Git hooks
can't find .git directory, skipping Git hooks installation

> core-js@3.6.4 postinstall /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/frontend/node_modules/core-js
> node -e "try{require('./postinstall')}catch(e){}"


> ejs@2.7.4 postinstall /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/frontend/node_modules/ejs
> node ./postinstall.js

added 1165 packages from 850 contributors and audited 25381 packages in 119.182s
found 0 vulnerabilities


┌──────────────────────────────────────────────────────────┐
│                 npm update check failed                  │
│           Try running with sudo or get access            │
│           to the local update config store via           │
│ sudo chown -R $USER:$(id -gn $USER) /home/admin1/.config │
└──────────────────────────────────────────────────────────┘
🚀  Invoking generators...
📦  Installing additional dependencies...

added 120 packages from 54 contributors and audited 26683 packages in 32.44s
found 0 vulnerabilities


┌──────────────────────────────────────────────────────────┐
│                 npm update check failed                  │
│           Try running with sudo or get access            │
│           to the local update config store via           │
│ sudo chown -R $USER:$(id -gn $USER) /home/admin1/.config │
└──────────────────────────────────────────────────────────┘
⚓  Running completion hooks...

📄  Generating README.md...

🎉  Successfully created project frontend.
👉  Get started with the following commands:

 $ cd frontend
 $ npm run serve


  Всё, мы сейчас создали frontend, точнее приложение (Vue application).

  Запускаем нашу балванку Vue application.

(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker$ cd frontend
(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/frontend$ npm run serve

> frontend@0.1.0 serve /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/frontend
> vue-cli-service serve

 INFO  Starting development server...
98% after emitting CopyPlugin

 DONE  Compiled successfully in 2883ms                                                                                                  15:56:25


  App running at:
  - Local:   http://localhost:8080/
  - Network: http://10.67.194.63:8080/

  Note that the development build is not optimized.
  To create a production build, run npm run build.

   В браузере переходим на представленнывыше URL и в браузере видим балванку нашего приложение.

   У любого JS фраймворка (Vue, React, Angular) есть точка входа. У нас может быть несколько точкек входа,
например отдельно фронтэнд и отдельно админка. Здесь тогда будут две разных точки входа, но в пределах одного приложения
точка входа должна быть одна. main.js - точка входа в наше приложение, имено здесь создаётся единственный экземпляр Vue.
Сюда импортируется наше единственное приложение "./App.vue"

    Vue использует NVVM паттерн, т.е. один компонент сразу отвечает за логику , за свои стили, за свою вёрстку,
за всё, всё, всё.

    В Файле App.vue, есть три основные секции, которые определяют концепцию Vue:

Данный блок (template) отвечает, за то как рисуется компонент.
<template>
    <div id="app">
        <div id="nav">
            <router-link to="/">Home</router-link> |
            <router-link to="/about">About</router-link>
        </div>
        <router-view/>
    </div>
</template>

Данный блок (style) собственно CSS данного компонента.
<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
}

#nav {
  padding: 30px;
}

#nav a {
  font-weight: bold;
  color: #2c3e50;
}

#nav a.router-link-exact-active {
  color: #42b983;
}
</style>

Есть ещё блок Script, в нашем приложении он отсутствует, позже мы его создадим.

В приложении  есть какие-то компоненты (папка "components"), какие-то вьюхи (папка "views"), во Vue приложении нет разницы компонент или
Вьюха.
    Компоненты - это тупые куски кода, которые просто что-то рисуют как-то выполняют свою функцию.
    Вьюхи - это полноценные страницы.
Далее мы удаляем и папку "Components" и вьюху "About" (Файл: About.vue).
оставим только "Home.vue"
    В папке router мы описываем по какому пути, какой компонент рисуется, ничего удивительного и сложного, очень похоже
на Flask.
    Выкинув и удалив всё не нужное из нашего приложения получили пустую балванку Vue приложения.