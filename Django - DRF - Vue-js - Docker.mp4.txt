
    Django - DRF - Vue-js - Docker

    Django Rest Framework

Home page: https://www.django-rest-framework.org/
Django Rest Framework - позволяет нам удобно сериализовать и десериализовать наши бизнес модели. Например у нас есть
объект "Автомобиль", который хранится в СУБД и у этого объекта есть ряд аттрибутов:
    - Vendor;
    - Модель автомобиля;
    - ОбЪем двигателя;
    - Год выпуска;
    - и т.д.
 И нам нужно это всё сериализовать например в JSON мы для этого как раз и будем использовать DRF.

    Vue.js

Vue.js - очень гибкий JS Framework, в отличие от React, который позволяет нам стартовать новые проекты и чисто на Vue.js и
дополнять Vue.js уже существующие проекты, на одной странице может быть JQuery, а на другой у нас может быть Vue.js.
основной особенностью Vue.js, как и всех JS Frameworks является реактивность и декларотивность.
    Реактивность - подразумевается следующее, допустим мы рисуем какую-нибудь переменную она у нас равна 5, потом мы
меняем эту переменную на 10 и она у нас перерисовывается во всех местах и во всех местах от неё зависящих происходит
перерисовка или пересчёт и т.д.
    Декларотивность - мы описываем не как должны менятся данные, а где они должны отображатся и по какой схеме их
вычислять, т.е. мы напрямую с DOM деревом html страницы не взаимодействуем, другими словами нам не надо писать код типа
$a.mobile.text = "Hello!", который все привыкли писать на JQuery и сильно страдать от этого. Vue.js нас от этого
избавляет. 07.01

    Создаём папку проекта и первое, что мы делаем это создаём виртуальное окружение - отдельный инстанс Python, который
содержит свои библиотеки с определёнными версиями, для того чтобы обеспеычить совместимость и работу даже старых
проектов со старыми пакетами Python.
    admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker$ python3 -m venv localenv
    admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker$ cd localenv
    admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv$ cd bin
    admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/bin$ . activate
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/bin$ . activate
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/bin$
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/bin$ django
        django: команда не найдена
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/bin$ pip3 install django
Collecting django
  Cache entry deserialization failed, entry ignored
  Downloading https://files.pythonhosted.org/packages/12/68/8c125da33aaf0942add5095a7a2a8e064b3812d598e9fb5aca9957872d71/Django-3.0.4-py3-none-any.whl (7.5MB)
    100% |████████████████████████████████| 7.5MB 152kB/s
Collecting pytz (from django)
  Cache entry deserialization failed, entry ignored
  Downloading https://files.pythonhosted.org/packages/e7/f9/f0b53f88060247251bf481fa6ea62cd0d25bf1b11a87888e53ce5b7c8ad2/pytz-2019.3-py2.py3-none-any.whl (509kB)
    100% |████████████████████████████████| 512kB 352kB/s
Collecting asgiref~=3.2 (from django)
  Downloading https://files.pythonhosted.org/packages/68/00/25013f7310a56d17e1ab6fd885d5c1f216b7123b550d295c93f8e29d372a/asgiref-3.2.7-py2.py3-none-any.whl
Collecting sqlparse>=0.2.2 (from django)
  Cache entry deserialization failed, entry ignored
  Downloading https://files.pythonhosted.org/packages/85/ee/6e821932f413a5c4b76be9c5936e313e4fc626b33f16e027866e1d60f588/sqlparse-0.3.1-py2.py3-none-any.whl (40kB)
    100% |████████████████████████████████| 40kB 262kB/s
Installing collected packages: pytz, asgiref, sqlparse, django
Successfully installed asgiref-3.2.7 django-3.0.4 pytz-2019.3 sqlparse-0.3.1
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/bin$ cd ../
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv$ cd ../
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker$ django-admin startproject project

    Здесь переименовываем "project/prioject" в "backend/project"

    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker$ cd backend
    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/backend$ ./manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).

You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.

March 26, 2020 - 05:55:05
Django version 3.0.4, using settings 'project.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.

    Стартанули пустой web сервер на django.

    Остановили Ctrl+z.

    Запустили миграции

    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/backend$ ./manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying sessions.0001_initial... OK

   Создаём Frontend через Vue CLI.

   Сначало необходимо установить Node.js. Vue CLI требуется Node.js версии 8.9 или выше (рекомендуется 8.11.0+).
Управлять несколькими версиями Node на машине можно с помощью nvm или nvm-windows.

    Устанавливаем Vue CLI:

        npm install -g @vue/cli
            # ИЛИ
        yarn global add @vue/cli

        vue --version

    Обновление
    Для обновления глобального пакета Vue CLI выполните команду:

        npm update -g @vue/cli
            # ИЛИ
        yarn global upgrade --latest @vue/cli.

    (localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker$ vue create frontend

Шаг №1
    Vue CLI v4.2.3
     ? Please pick a preset: (Use arrow keys)
     ❯ default (babel, eslint)
        Manually select features
    Здесь выбираем "Manually".

Шаг №2
    Vue CLI v4.2.3
    ? Please pick a preset: Manually select features
    ? Check the features needed for your project:
        ◉ Babel
        ◯ TypeScript
        ◯ Progressive Web App (PWA) Support
        ◉ Router
        ◯ Vuex
        ◯ CSS Pre-processors
    ❯◉ Linter / Formatter
        ◯ Unit Testing
        ◯ E2E Testing
    Жмём "Enter".

Шаг №3
    Vue CLI v4.2.3
    ? Please pick a preset: Manually select features
    ? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n)
    Жмём "n".

Шаг №4
    Vue CLI v4.2.3
    ? Please pick a preset: Manually select features
    ? Check the features needed for your project: Babel, Router, Linter
    ? Use history mode for router? (Requires proper server setup for index fallback in production) No
    ? Pick a linter / formatter config:
        ESLint with error prevention only
    ❯ ESLint + Airbnb config
        ESLint + Standard configШаг №5
        ESLint + Prettier
    Выбираем ESLint + Airbnb config и жмём "Enter".

Шаг №5
    Vue CLI v4.2.3
    ? Please pick a preset: Manually select features
    ? Check the features needed for your project: Babel, Router, Linter
    ? Use history mode for router? (Requires proper server setup for index fallback in production) No
    ? Pick a linter / formatter config: Airbnb
    ? Pick additional lint features: (Press <space> to select, <a> to toggle all, <i> to invert selection)
        ❯◉ Lint on save
        ◯ Lint and fix on commit
    Выбираем "Lint on save" и жмём "Enter".

Шаг №6
    Vue CLI v4.2.3
    ? Please pick a preset: Manually select features
    ? Check the features needed for your project: Babel, Router, Linter
    ? Use history mode for router? (Requires proper server setup for index fallback in production) No
    ? Pick a linter / formatter config: Airbnb
    ? Pick additional lint features: (Press <space> to select, <a> to toggle all, <i> to invert selection)Lint on save
    ? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)
    ❯ In dedicated config files
      In package.json
    Выбираем "In dedicated config files" и жмём "Enter".

Шаг №7
    Vue CLI v4.2.3
    ? Please pick a preset: Manually select features
    ? Check the features needed for your project: Babel, Router, Linter
    ? Use history mode for router? (Requires proper server setup for index fallback in production) No
    ? Pick a linter / formatter config: Airbnb
    ? Pick additional lint features: (Press <space> to select, <a> to toggle all, <i> to invert selection)Lint on save
    ? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files
    ? Save this as a preset for future projects? (y/N)
     Жмём непонятно что, как автор сказал "Что-то натыкал".

Шаг №8
Vue CLI v4.2.3
    ? Please pick a preset: Manually select features
    ? Check the features needed for your project: Babel, Router, Linter
    ? Use history mode for router? (Requires proper server setup for index fallback
    in production) No
    ? Pick a linter / formatter config: Airbnb
    ? Pick additional lint features: (Press <space> to select, <a> to toggle all, <i> to invert selection)Lint on save
    ? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files
    ? Save this as a preset for future projects? No
    ? Pick the package manager to use when installing dependencies: NPM

Начался процесс установки
Vue CLI v4.2.3
✨  Creating project in /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/frontend.
⚙️  Installing CLI plugins. This might take a while...


> yorkie@2.0.0 install /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/frontend/node_modules/yorkie
> node bin/install.js

setting up Git hooks
can't find .git directory, skipping Git hooks installation

> core-js@3.6.4 postinstall /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/frontend/node_modules/core-js
> node -e "try{require('./postinstall')}catch(e){}"


> ejs@2.7.4 postinstall /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/frontend/node_modules/ejs
> node ./postinstall.js

added 1165 packages from 850 contributors and audited 25381 packages in 119.182s
found 0 vulnerabilities


┌──────────────────────────────────────────────────────────┐
│                 npm update check failed                  │
│           Try running with sudo or get access            │
│           to the local update config store via           │
│ sudo chown -R $USER:$(id -gn $USER) /home/admin1/.config │
└──────────────────────────────────────────────────────────┘
🚀  Invoking generators...
📦  Installing additional dependencies...

added 120 packages from 54 contributors and audited 26683 packages in 32.44s
found 0 vulnerabilities


┌──────────────────────────────────────────────────────────┐
│                 npm update check failed                  │
│           Try running with sudo or get access            │
│           to the local update config store via           │
│ sudo chown -R $USER:$(id -gn $USER) /home/admin1/.config │
└──────────────────────────────────────────────────────────┘
⚓  Running completion hooks...

📄  Generating README.md...

🎉  Successfully created project frontend.
👉  Get started with the following commands:

 $ cd frontend
 $ npm run serve


  Всё, мы сейчас создали frontend, точнее приложение (Vue application).

  Запускаем нашу балванку Vue application.

(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker$ cd frontend
(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/frontend$ npm run serve

> frontend@0.1.0 serve /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/frontend
> vue-cli-service serve

 INFO  Starting development server...
98% after emitting CopyPlugin

 DONE  Compiled successfully in 2883ms                                                                                                  15:56:25


  App running at:
  - Local:   http://localhost:8080/
  - Network: http://10.67.194.63:8080/

  Note that the development build is not optimized.
  To create a production build, run npm run build.

   В браузере переходим на представленнывыше URL и в браузере видим балванку нашего приложение.

   У любого JS фраймворка (Vue, React, Angular) есть точка входа. У нас может быть несколько точкек входа,
например отдельно фронтэнд и отдельно админка. Здесь тогда будут две разных точки входа, но в пределах одного приложения
точка входа должна быть одна. main.js - точка входа в наше приложение, имено здесь создаётся единственный экземпляр Vue.
Сюда импортируется наше единственное приложение "./App.vue"

    Vue использует NVVM паттерн, т.е. один компонент сразу отвечает за логику , за свои стили, за свою вёрстку,
за всё, всё, всё.

    В Файле App.vue, есть три основные секции, которые определяют концепцию Vue:

Данный блок (template) отвечает, за то как рисуется компонент.
<template>
    <div id="app">
        <div id="nav">
            <router-link to="/">Home</router-link> |
            <router-link to="/about">About</router-link>
        </div>
        <router-view/>
    </div>
</template>

Данный блок (style) собственно CSS данного компонента.
<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
}

#nav {
  padding: 30px;
}

#nav a {
  font-weight: bold;
  color: #2c3e50;
}

#nav a.router-link-exact-active {
  color: #42b983;
}
</style>

Есть ещё блок Script, в нашем приложении он отсутствует, позже мы его создадим.

В приложении  есть какие-то компоненты (папка "components"), какие-то вьюхи (папка "views"), во Vue приложении нет разницы компонент или
Вьюха.
    Компоненты - это тупые куски кода, которые просто что-то рисуют как-то выполняют свою функцию.
    Вьюхи - это полноценные страницы.
Далее мы удаляем и папку "Components" и вьюху "About" (Файл: About.vue).
оставим только "Home.vue"
    В папке router мы описываем по какому пути, какой компонент рисуется, ничего удивительного и сложного, очень похоже
на Flask.
    Выкинув и удалив всё не нужное из нашего приложения получили пустую балванку Vue приложения.

    Создаём Django application.

(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/backend$ ./manage.py startapp core
Создаём приложение, типо ядро (core) с некой ядерной логикой.

Стартуем Django web server

(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/backend$ ./manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
March 30, 2020 - 07:43:53
Django version 3.0.4, using settings 'project.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.


Запускаем ещё один терминал и в нём запускаем Vue.js  приложение

admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/frontend$ npm run serve

> frontend@0.1.0 serve /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/frontend
> vue-cli-service serve

 INFO  Starting development server...
98% after emitting CopyPlugin

 DONE  Compiled successfully in 1313ms                                  10:46:55


  App running at:
  - Local:   http://localhost:8081/
  - Network: http://172.20.10.12:8081/

  Note that the development build is not optimized.
  To create a production build, run npm run build.

   Прописываем наше Django приложение в файл 'Settings.py' нашего backend проекта.

    TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core',
            ],
        },
    },
]

    Создаём модели "models.py".

    Моздаём Миграции:
(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educa-Django-DRF-Vue.js-Docker/backend$ ./manage.py makemigrations
Migrations for 'core':
  core/migrations/0001_initial.py
    - Create model Car

    Файл 0001_initial.py представлено описание этой миграции, что это начальная миграция, операции, поля и т.д.

    Деем миграцию:

(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/backend$ ./manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, core, sessions
Running migrations:
  Applying core.0001_initial... OK

    В СУД у нас появилось новая таблица "core".

    Основная фишка миграций в Django это, то что их можно откатывать

    Но начальную миграцию откатить нельзя!!

(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/backend$ ./manage.py migrate core 0001
Operations to perform:
  Target specific migration: 0001_initial, from core
Running migrations:
  No migrations to apply.

    Некоторые миграции могут быть необратимиы, особено те которые пишутся в ручную. В продакшене сделать обратимые
миграции не получится, для этого случая лучше сделать ещё одну миграцию, которая откатывают эту миграцию, как
в "git revert". Для отката мы просто вводим номер миграции, к которой нам надо откатится, например файл: 0001_initial.py,
номер у миграции будет "0001".

(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/backend$ ./manage.py migrate core 0001
Operations to perform:
  Target specific migration: 0001_initial, from core
Running migrations:
  No migrations to apply.

    Добавляем urls.py в приложение "core".

    Далее пишем view (вьюху), которая отдаёт все машины. Вьюхи в класическом понимании это функции, которые принимают
обязательно объект Запрос (request). В запросе могут быть пользователь, по какому URL он прошёл, заголовки
запроса, кукисы (COOKIES)
        request.COOCKIES. - отдаст все кукисы;
        request.META. - отдаст все заголовки.

    Идём на http://127.0.0.1:8000/api/cars/ и видим пустой список [].

    Теперь заполним базу данных.

(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/backend$ ./manage.py shell
Python 3.6.9 (default, Nov  7 2019, 10:44:02)
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>>
>>> exit()

    Кому нравится может установить вместо обычной консоли Python iPython
(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/backend$ pip install ipython
(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/backend$ ./manage.py shell
Python 3.6.9 (default, Nov  7 2019, 10:44:02)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.13.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]:

    Вот автоматически запустился вместо стандартной Python консоли iPython.

In [1]: from core.models import *

In [2]: Car
Out[2]: core.models.Car

In [3]: Car.objects.create(vendor='BMW', model='325', year=2008, volume=2000)
Out[3]: <Car: Car object (1)>

    Идём на http://127.0.0.1:8000/api/cars/ и видим созданный объект машина
    [{"vendor": "BMW", "model": "325", "year": 2008, "volume": 2000}]

In [4]: Car.objects.create(vendor='Toyota', model='Mark II', year=1998, volume=2000)
Out[4]: <Car: Car object (2)>

    Идём на http://127.0.0.1:8000/api/cars/ и видим созданный объект машина
    [{"vendor": "BMW", "model": "325", "year": 2008, "volume": 2000}, {"vendor": "Toyota", "model": "Mark II", "year": 1998, "volume": 2000}]

    И эти данные мы уже можем забирать через наш frontend.


    Для удобной работы с Vue.js можно установить расширение в chrome "Vue.js devtools".

    00:46:00
    Пока не работаеи из-за Cross-Origin Resource Sharing (CORS) (совместное использование ресурсов между разными
источниками) всё, что нам надо сделать это добавить наш frontend домен в разрешённый список доменов нашего Django
сервера. CORS - это первое с чем обычно сталкиваются, другими словами CORS - это шаринг ресурсов между хостами. Даже,
то что у нашего frontend и backend одинаковое доменное имя http://127.0.0.1 они работают по разным портам и по сути
наши frontend и backend работают по разным хостам. Для корректной работы нам в frontend наш backend должен поставлять
CORS заголовки. Для Django это делается крайне просто, установкой пакета django-cors-headers.

(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/backend$ pip3 install django-cors-headers
Collecting django-cors-headers
  Downloading https://files.pythonhosted.org/packages/19/4e/dd037bf42cc33d1d61e45b973507303afad14fc18bd36329ec8ab3673373/django_cors_headers-3.2.1-py3-none-any.whl
Requirement already satisfied: Django>=1.11 in /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/lib/python3.6/site-packages (from django-cors-headers)
Requirement already satisfied: pytz in /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/lib/python3.6/site-packages (from Django>=1.11->django-cors-headers)
Requirement already satisfied: asgiref~=3.2 in /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/lib/python3.6/site-packages (from Django>=1.11->django-cors-headers)
Requirement already satisfied: sqlparse>=0.2.2 in /home/admin1/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/localenv/lib/python3.6/site-packages (from Django>=1.11->django-cors-headers)
Installing collected packages: django-cors-headers
Successfully installed django-cors-headers-3.2.1


00:47:41
    Всё,  наш backend отправляет CORS заголовки и мы видим, через консоль разработчике (вкладка Vue) на стороне
frontend, data и наши два объекта:
        <Root>
            <App>
                <RouterLink>
                <RouterLink>
                <home>
                    cars: Array[2].

    мы скачали с Backend по AJAX наш масив, нам теперь надо его отрендерить.
    во Vue все итерации по объектам, показы пишутся в аттрибутах тегов.
     <tr v-for="car in cars" v-bind:key="car">
         <td>{{car.vendor}}</td>
         <td>{{car.model}}</td>
         <td>{{car.year}}</td>
         <td>{{car.volume}}</td>
      </tr>
     Выводим список машин полученных с нашего backend. У нас отрисовались данные и как мы видим мы не где с DOM не взаимодействуем. Всё
           отрисовалось как-только cars обновился.

     Далее мы удаляем вкладки "Home" и "About" из файла App.vue.
      <div id="nav">
         <router-link to="/">Home</router-link> |
         <router-link to="/about">About</router-link>
      </div>

      В файл Home.vue добавляем инпуты и кнопку создания:

          <input placeholder="vendor"/>
          <input placeholder="model"/>
          <input placeholder="year"/>
          <input placeholder="volume"/>
          <button>Create</button>

      После этого мы связываем наши Инпуты с Vue( файл: Home.vue
            <input placeholder="vendor" v-model="currentCar.vendor"/>
            <input placeholder="model" v-model="currentCar.model"/>
                <!--
                    Два последующих параметра у нас числа. Так записываем для того, чтобы Vue автоматически
                    ту строку, которую мы ввели конвертировал в число.
                -->
            <input placeholder="year" v-model.number="currentCar.year"/>
            <input placeholder="volume" v-model.number="currentCar.volume"/>
            <button>Create</button>

      Далее при нажатии на кнопку "Create" отправлять запрос в backend, но чтобы отпралять запрос в backend нужно
      сначало принимать запрос в backend.
      для этого мы переходим в "backend/core/views.py" и пытаемся там создать новую функццию:

            def create_car(request):
      и тут у нас начинают появлятся сомнения, почему мы пишем столько болерного кода, а потом мы захотим удалить
      эту машину или захотим редактировать её мы получим много кусков повторяющегося кода.
      Поэтому всё уже придумали и нам только нужно установить "djangorestframework".

(localenv) admin1@ubuntu18:~/work/Education/WebFullStackDevelopment/Educate-Django-DRF-Vue.js-Docker/backend$ pip3 install djangorestframework
Collecting djangorestframework
  Cache entry deserialization failed, entry ignored
  Downloading https://files.pythonhosted.org/packages/be/5b/9bbde4395a1074d528d6d9e0cc161d3b99bd9d0b2b558ca919ffaa2e0068/djangorestframework-3.11.0-py3-none-any.whl (911kB)
    100% |████████████████████████████████| 911kB 153kB/s
Requirement already satisfied: django>=1.11 in ./localenv/lib/python3.6/site-packages (from djangorestframework)
Requirement already satisfied: sqlparse>=0.2.2 in ./localenv/lib/python3.6/site-packages (from django>=1.11->djangorestframework)
Requirement already satisfied: asgiref~=3.2 in ./localenv/lib/python3.6/site-packages (from django>=1.11->djangorestframework)
Requirement already satisfied: pytz in ./localenv/lib/python3.6/site-packages (from django>=1.11->djangorestframework)
Installing collected packages: djangorestframework
Successfully installed djangorestframework-3.11.0

    И после этого добавляем в файл: "backend/project/settings.py" в список "INSTALLED_APPS" ещё один параметр
    'rest_framework'



